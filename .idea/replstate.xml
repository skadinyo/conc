<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1439487430651">{:repl-history {:ide [], :local [&quot;()&quot; &quot;(m/combination 2 [1 2 3])&quot; &quot;(m/combi  [1 2 3])&quot; &quot;(m/combi 1 [1 2 3])&quot; &quot;(m/combi 2 [1 2 3])&quot; &quot;(m/join-combi #{1} [2 3])&quot; &quot;(m/join-combi #{1} #{2 3})&quot; &quot;(m/combi 3 #{1 2 3})&quot; &quot;(m/combi 4 #{1 2 3})&quot; &quot;(m/combi 1 #{1 2 3})&quot; &quot;(m/combi 0 #{1 2 3})&quot; &quot;(m/combi 2 #{1 2 3})&quot; &quot;(m/combi 5 #{1 2 3})&quot; &quot;(m/combi 5 #{1/2 1/3 1/4 /15})&quot; &quot;(m/combi 5 #{1/2 1/3 1/4 1/5})&quot; &quot;(m/combi 3 #{1/2 1/3 1/4 1/5})&quot; &quot;(-&gt;&gt; (m/combi 3 #{1/2 1/3 1/4 1/5})\n     (map (partial apply *)))&quot; &quot;(-&gt;&gt; (m/combi 3 #{1/2 1/3 1/4 1/5})\n     (map (partial apply *))\n     (reduce +))&quot; &quot;(-&gt;&gt; (m/combi 3 (set (range 1 10))))&quot; &quot;(-&gt;&gt; (m/combi 3 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 4 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 5 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 6 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 7 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 8 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 9 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 10 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 11 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 112 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 12 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 13 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 15 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 14 (set (range 1 15))))&quot; &quot;(-&gt;&gt; (m/combi 15 (set (range 1 16))))&quot; &quot;(-&gt;&gt; (m/combi 14 (set (range 1 16))))&quot; &quot;(-&gt;&gt; (m/combi 13 (set (range 1 16))))&quot; &quot;(-&gt;&gt; (m/combi 12 (set (range 1 16))))&quot; &quot;(-&gt;&gt; (m/combi 10 (set (range 1 16))))&quot; &quot;(map #(m/combination % #{1/2 1/3 1/4 1/5}) [3 4])&quot; &quot;(concat (map #(m/combi % #{1/2 1/3 1/4 1/5}) [3 4]))&quot; &quot;(map #(m/combi % #{1/2 1/3 1/4 1/5}) [3 4])&quot; &quot;(apply clojure.set/union (map #(m/combi % #{1/2 1/3 1/4 1/5}) [3 4]))&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{1/2 1/3 1/4 1/5}) [3 4]))\n     (map (partial apply *))\n     (reduce +))&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{1/2 1/3 1/4 1/5}) [ 4]))\n     (map (partial apply *))\n     (reduce +))&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{1/2 1/3 1/4 1/5}) [3]))\n     (map (partial apply *))\n     (reduce +))&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{2 3 4 5}) [3 4]))\n     )&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{2 3 4 5}) [3 4]))\n     (map vec))&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{2 3 4 5}) [3 4]))\n     (map (fn [i]\n            [(vec i) (clojure.set/difference #{2 3 4 5} i)])))&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{2 3 4 5}) [3 4]))\n     (map (fn [i]\n            [(vec i) (vec (clojure.set/difference #{2 3 4 5} i))])))&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{2 3 4 5}) [3 4]))\n     (map (fn [i]\n            [(vec i) (vec (clojure.set/difference #{2 3 4 5} i))]))\n     (map (fn [m k]\n            (let [ms (reduce * (map (partial / 1) m))\n                  ks (if (zero? k)\n                      1\n                      (reduce * (map #(/ (dec k) k) k)))]\n              (* ms ks)))))&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{2 3 4 5}) [3 4]))\n     (map (fn [i]\n            [(vec i) (vec (clojure.set/difference #{2 3 4 5} i))]))\n     (map (fn [[m k]]\n            (let [ms (reduce * (map (partial / 1) m))\n                  ks (if (zero? k)\n                      1\n                      (reduce * (map #(/ (dec k) k) k)))]\n              (* ms ks)))))&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{2 3 4 5}) [3 4]))\n     (map (fn [i]\n            [(vec i) (vec (clojure.set/difference #{2 3 4 5} i))]))\n     (map (fn [[m k]]\n            (let [ms (reduce * (map (partial / 1) m))]\n              ms))))&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{2 3 4 5}) [3 4]))\n     (map (fn [i]\n            [(vec i) (vec (clojure.set/difference #{2 3 4 5} i))]))\n     (map (fn [[m k]]\n            (let [ms (reduce * (map (partial / 1) m))\n                  ks (if (empty? k)\n                      1\n                      (reduce * (map #(/ (dec k) k) k)))]\n              (* ms ks)))))&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{2 3 4 5}) [3 4]))\n     (map (fn [i]\n            [(vec i) (vec (clojure.set/difference #{2 3 4 5} i))]))\n     (map (fn [[m k]]\n            (let [ms (reduce * (map (partial / 1) m))\n                  ks (if (empty? k)\n                      1\n                      (reduce * (map #(/ (dec %) %) k)))]\n              (* ms ks)))))&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{2 3 4 5}) [3 4]))\n     (map (fn [i]\n            [(vec i) (vec (clojure.set/difference #{2 3 4 5} i))]))\n     (map (fn [[m k]]\n            (let [ms (reduce * (map (partial / 1) m))\n                  ks (if (empty? k)\n                      1\n                      (reduce * (map #(/ (dec %) %) k)))]\n              (* ms ks))))\n     (reduce +))&quot; &quot;9219406943/20922789888000&quot; &quot;(-&gt;&gt; (apply clojure.set/union (map #(m/combi % #{2 3 4 5 6 7 8 9 10 11 12 13 14 15 16}) [7 8 9 10 11 12 13 14 15]))\n     (map (fn [i]\n            [(vec i) (vec (clojure.set/difference #{2 3 4 5 6 7 8 9 10 11 12 13 14 15 16} i))]))\n     (map (fn [[m k]]\n            (let [ms (reduce * (map (partial / 1) m))\n                  ks (if (empty? k)\n                       1\n                       (reduce * (map #(/ (dec %) %) k)))]\n              (* ms ks))))\n     (reduce +))&quot; &quot;(-&gt;&gt; [1 2 1 2]\n     (butlast))&quot; &quot;(-&gt;&gt; [1 2 1 2]\n     (butlast)\n     (rest)\n     (partition 2))&quot; &quot;(-&gt;&gt; [1 2 1 2]\n     (butlast)\n     (rest)\n     (partition 2)\n     (map (partition apply +)))&quot; &quot;(-&gt;&gt; [1 2 1 2]\n     (butlast)\n     (rest)\n     (partition 2)\n     (map (partial apply +)))&quot; &quot;(reduce + (eul-121 15))&quot; &quot;(def odds 11/120)&quot; &quot;(* 9 odds)&quot; &quot;2988969984000&quot; &quot;(- 2988969984000 144539849)&quot; &quot;(def win 144539849)&quot; &quot;(def lose 2988825444151)&quot; &quot;(/ 109 11 1.0)&quot; &quot;(- 120 11)&quot; &quot;(eul-121 8)&quot; &quot;(/ lose win 1.0)&quot; &quot;144539849&quot; &quot;9219406943&quot; &quot;((let [x (eul-121 15)]\n   (-&gt;&gt; (split-at 7 x)\n        (map (partial apply +)))))&quot; &quot;((let [x (eul-121 15)]\n   (-&gt;&gt; (split-at 7 x)\n        )))&quot; &quot;((let [x (eul-121 15)]\n   (-&gt;&gt; (split-at 7 x))))&quot; &quot;(let [x (eul-121 15)]\n  (-&gt;&gt; (split-at 7 x)\n       (map (partial apply +))))&quot; &quot;(let [x (eul-121 15)]\n  (-&gt;&gt; (split-at 6 x)\n       (map (partial apply +))))&quot; &quot;(let [x (eul-121 15)]\n  (-&gt;&gt; (split-at 8 x)\n       (map (partial apply +))))&quot; &quot;(let [x (eul-121 15)]\n  (-&gt;&gt; (split-at 8 x)\n       (map (partial apply +))\n       (reverse)\n       (apply /)))&quot; &quot;(let [x (eul-121 15)]\n  (-&gt;&gt; (split-at 8 x)\n       (map (partial apply +))\n       (reverse)\n       (apply /)\n       (/ 1.0)))&quot; &quot;(let [x (eul-121 15)]\n  (-&gt;&gt; (split-at 8 x)\n       (map (partial apply +))\n       (reverse)\n       (apply /)\n       (inc)))&quot; &quot;(let [x (eul-121 15)]\n  (-&gt;&gt; (split-at 8 x)\n       (map (partial apply +))\n       (reverse)\n       (apply /)\n       (inc)\n       (int)))&quot; &quot;(eul-121 1)&quot; &quot;(quot 15 2)&quot; &quot;(inc 7)&quot; &quot;(quot 14 2)&quot; &quot;(eul-121 14)&quot; &quot;(eul-121 2)&quot; &quot;(eul-121 3)&quot; &quot;(eul-121 10)&quot; &quot;(eul-121 16)&quot; &quot;(eul-121 17)&quot; &quot;(eul-121 18)&quot; &quot;(eul-121 5)&quot; &quot;(eul-121 4)&quot; &quot;(eul-121 15)&quot; &quot;5&quot; &quot;(range 3 100 4)&quot; &quot;(eul144 3 7)&quot;], :remote []}}</component>
</project>