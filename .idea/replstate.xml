<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1438080844315">{:repl-history {:ide [], :local [&quot;(reduce +' -1 (odd-totient-to 1000))&quot; &quot;(odd-totient-to 1000)&quot; &quot;(odd-totient-to 100)&quot; &quot;(time (odd-totient-to 100))&quot; &quot;(time (odd-totient-to 50000000))&quot; &quot;(time (odd-totient-to 500))&quot; &quot;(time (odd-totient-to 5000))&quot; &quot;(time (odd-totient-to 50000))&quot; &quot;(time (odd-totient-to 500000))&quot; &quot;(time (odd-totient-to 5000000))&quot; &quot;(time (odd-totient-to 500000000))&quot; &quot;(ns conc.core)&quot; &quot;(primes-to 100)&quot; &quot;(reduce + (primes-to 1000000))&quot; &quot;(time (reduce + (primes-to 100000000)))&quot; &quot;(time (reduce + (dumb-prime 100000)))&quot; &quot;(time (reduce + (primes-tox 1000)))&quot; &quot;(int 3,1)&quot; &quot;(int 3.1)&quot; &quot;(int 3.2)&quot; &quot;(dumb-prime 10)&quot; &quot;(r/reduce + (r/remove even? (range 10000000000)))&quot; &quot;(r/reduce + (r/remove even? (range 10000)))&quot; &quot;(r/reduce + (r/remove even? (range 100000)))&quot; &quot;(r/reduce + (r/remove even? (range 1000000)))&quot; &quot;(r/reduce + (r/remove even? (range 10000000)))&quot; &quot;(time (r/reduce + (r/remove even? (range 10000000))))&quot; &quot;(time (reduce + (remove even? (range 10000000))))&quot; &quot;(time (reduce + (dumb-prime 10000)))&quot; &quot;(time (reduce + (dumb-prime 10)))&quot; &quot;(time (reduce + (dumb-prime 100)))&quot; &quot;(time (reduce + (dumb-prime 1000)))&quot; &quot;(r/remove #(= 0 (rem % 2)) (range 1000))&quot; &quot;(r/remove #(= 0 (rem % 2)) [1 2 3])&quot; &quot;@(r/filter #(= 0 (rem % 2)) [1 2 3])&quot; &quot;'(r/filter #(= 0 (rem % 2)) [1 2 3])&quot; &quot;(r/filter #(= 0 (rem % 2)) [1 2 3])&quot; &quot;(time (reduce + (primes-to 1000)))&quot; &quot;(time (reduce + (primes-to 10000)))&quot; &quot;(time (reduce + (primes-to 100000)))&quot; &quot;(time (reduce + (primes-to 1000000)))&quot; &quot;(time (reduce + (primes-to 10000000)))&quot; &quot;(time (reduce + (primes-to-1 10000000)))&quot; &quot;(time (reduce + (primes-to1 10000000)))&quot; &quot;(time (reduce + (primes-to2 10000000)))&quot; &quot;(time (reduce + (primes-to2 100000000)))&quot; &quot;(time (reduce + (primes-to1 100000000)))&quot; &quot;(dumb-prime 100)&quot; &quot;(dumb-prime 2)&quot; &quot;(dumb-prime 3)&quot; &quot;(dumb-prime 4)&quot; &quot;(dumb-prime 5)&quot; &quot;(dumb-prime 1)&quot; &quot;(dumb-prime 1000)&quot; &quot;(reduce + (dumb-prime 100000))&quot; &quot;(reduce + (dumb-prime 10000))&quot; &quot;(eul-1-1 1000)&quot; &quot;(eul-1-1 10)&quot; &quot;(time (eul-1-1 1000))&quot; &quot;(eul-95-1 10)&quot; &quot;(eul-95-1 2)&quot; &quot;(eul-95-1 3)&quot; &quot;(time (eul-95-1 3))&quot; &quot;(cons 3 #{1})&quot; &quot;(loop [i 1]\n  (if (= i (quot lim 2))\n    nil\n    (let [a (find-ami i)]\n      (do\n        (println i a)\n        (recur (inc i))))))&quot; &quot;(time (eul-95-1 10))&quot; &quot;(eul-76 5 (reverse (range 1 6)))&quot; &quot;(e76 5 (reverse (range 1 6)))&quot; &quot;(loop [i 1]\n  (if (&gt; (e76 i (reverse (range 1 (inc i)))) 1000)\n    i\n    (recur (inc i))))&quot; &quot;(loop [i 1]\n  (if (&gt; (e76 i (reverse (range 1 (inc i)))) 10000)\n    i\n    (recur (inc i))))&quot; &quot;(loop [i 1]\n  (if (&gt; (e76 i (reverse (range 1 (inc i)))) 100000)\n    i\n    (recur (inc i))))&quot; &quot;(loop [i 1]\n  (if (&gt; (e76 i (reverse (range 1 (inc i)))) 1000000)\n    i\n    (recur (inc i))))&quot; &quot;(loop [i 1]\n  (if (= 0 (rem (e76 i (reverse (range i (inc i)))) 1000))\n    i\n    (recur (inc i))))&quot; &quot;(loop [i 1]\n  (if (= 0 (rem (e76 i (reverse (range i (inc i)))) 1000000))\n    i\n    (recur (inc i))))&quot; &quot;(loop [i 1]\n  (if (= 0 (rem (e76 i (reverse (range i (inc i)))) 1000000))\n    i\n    (do\n      (println i)\n      (recur (inc i)))))&quot; &quot;(e76 1)&quot; &quot;(e76 2)&quot; &quot;(e76 3)&quot; &quot;(e76 4)&quot; &quot;(loop [i 1]\n  (if (= 0 (rem (e76 i) 10))\n    i\n    (do\n      (println i)\n      (recur (inc i)))))&quot; &quot;(loop [i 1]\n  (if (= 0 (rem (e76 i) 100))\n    i\n    (do\n      (println i)\n      (recur (inc i)))))&quot; &quot;(loop [i 1]\n  (if (= 0 (rem (e76 i) 100))\n    i\n    (do\n      (if (= 0 (rem i 10000))\n        (println i))\n      (recur (inc i)))))&quot; &quot;(loop [i 1]\n  (if (= 0 (rem (e76 i) 1000000))\n    i\n    (do\n      (if (= 0 (rem i 10000))\n        (println i))\n      (recur (inc i)))))&quot; &quot;(e76 5)&quot; &quot;(e76 90)&quot; &quot;(e76 70)&quot; &quot;(e76 100)&quot; &quot;(e76 10)&quot; &quot;(e76 20)&quot; &quot;(e76 30)&quot; &quot;(e76 40)&quot; &quot;(e76 50)&quot; &quot;(e76 60)&quot; &quot;(loop [i 1]\n  (if (= 0 (rem (e76 i) 1000))\n    i\n    (do\n      (println i)\n      (recur (inc i)))))&quot; &quot;(loop [i 1]\n  (let [res (e76 i)]\n    (if (= 0 (rem res 1000))\n      i\n      (do\n        (println i res)\n        (recur (inc i))))))&quot; &quot;(first #{1 2 3})&quot; &quot;(first #{2 1 2 3})&quot; &quot;(first #{2 1 3})&quot; &quot;(rest #{2 1 3})&quot; &quot;(loop [i 1]\n  (let [res (e76 i (reverse (range 1 (inc i))))]\n    (if (= 0 (rem res 1000))\n      i\n      (do\n        (println i res)\n        (recur (inc i))))))&quot; &quot;(loop [i 1]\n  (let [res (e76 i (reverse (range 1 (inc i))))]\n    (if (= 0 (rem res 1000000))\n      i\n      (do\n        (println i res)\n        (recur (inc i))))))&quot;], :remote []}}</component>
</project>