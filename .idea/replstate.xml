<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1436894174074">{:repl-history {:ide [], :local [&quot;(reduce * (eul-204-1 5 1000000))&quot; &quot;(reduce * (eul-204-1 5 100000000))&quot; &quot;(for [i []\n      j (range 1 10)]\n  i j)&quot; &quot;(for [i []\n      j (range 1 10)]\n  [i j])&quot; &quot;(eul-204-1 5 100)&quot; &quot;(eul-204-1 5 1000)&quot; &quot;(eul-204-1 5 10000)&quot; &quot;(eul-204-1 5 100000)&quot; &quot;(eul-204-1 5 1000000)&quot; &quot;(eul-204-1 5 10000000)&quot; &quot;(eul-204-1 100 10000)&quot; &quot;(eul-204-1 100 100000)&quot; &quot;(eul-204-1 100 1000000)&quot; &quot;(m/primes-to 6)&quot; &quot;(eul-204-1 100 100000000)&quot; &quot;(eul-204-1 5 100000000)&quot; &quot;(eul-204-1 100 1000000000)&quot; &quot;(time (eul-204-1 100 1000000000))&quot; &quot;(time (totient-to 100))&quot; &quot;(time (m/totient-to 100))&quot; &quot;(reduce + -1 (odd-totient-to 1000))&quot; &quot;(reduce + -1 (odd-totient-to 100))&quot; &quot;(reduce + -1 (odd-totient-to 10000))&quot; &quot;(reduce + -1 (odd-totient-to 100000))&quot; &quot;(map #(reduce +' -1 (odd-totient-to %)) (take 10 (iterate #(* 10 %) 10)))&quot; &quot;(map #(reduce +' -1 (odd-totient-to %)) (take 5 (iterate #(* 10 %) 10)))&quot; &quot;(map #(reduce +' -1 (odd-totient-to %)) (take 7 (iterate #(* 10 %) 10)))&quot; &quot;(reduce +' -1 (odd-totient-to 1000000))&quot; &quot;(reduce +' -1 (odd-totient-to 10000000))&quot; &quot;(reduce +' -1 (odd-totient-to 10000))&quot; &quot;(reduce +' -1 (odd-totient-to 100000))&quot; &quot;(reduce +' -1 (odd-totient-to 500000000))&quot; &quot;(m/primes-tox 10)&quot; &quot;(m/primes-tox 100)&quot; &quot;(reduce +' -1 (odd-totient-to 100))&quot; &quot;(reduce +' -1 (odd-totient-to 1000))&quot; &quot;(odd-totient-to 1000)&quot; &quot;(odd-totient-to 100)&quot; &quot;(time (odd-totient-to 100))&quot; &quot;(time (odd-totient-to 50000000))&quot; &quot;(time (odd-totient-to 500))&quot; &quot;(time (odd-totient-to 5000))&quot; &quot;(time (odd-totient-to 50000))&quot; &quot;(time (odd-totient-to 500000))&quot; &quot;(time (odd-totient-to 5000000))&quot; &quot;(time (odd-totient-to 500000000))&quot; &quot;(ns conc.core)&quot; &quot;(primes-to 100)&quot; &quot;(reduce + (primes-to 1000000))&quot; &quot;(time (reduce + (primes-to 100000000)))&quot; &quot;(time (reduce + (dumb-prime 100000)))&quot; &quot;(time (reduce + (primes-tox 1000)))&quot; &quot;(int 3,1)&quot; &quot;(int 3.1)&quot; &quot;(int 3.2)&quot; &quot;(dumb-prime 10)&quot; &quot;(r/reduce + (r/remove even? (range 10000000000)))&quot; &quot;(r/reduce + (r/remove even? (range 10000)))&quot; &quot;(r/reduce + (r/remove even? (range 100000)))&quot; &quot;(r/reduce + (r/remove even? (range 1000000)))&quot; &quot;(r/reduce + (r/remove even? (range 10000000)))&quot; &quot;(time (r/reduce + (r/remove even? (range 10000000))))&quot; &quot;(time (reduce + (remove even? (range 10000000))))&quot; &quot;(time (reduce + (dumb-prime 10000)))&quot; &quot;(time (reduce + (dumb-prime 10)))&quot; &quot;(time (reduce + (dumb-prime 100)))&quot; &quot;(time (reduce + (dumb-prime 1000)))&quot; &quot;(r/remove #(= 0 (rem % 2)) (range 1000))&quot; &quot;(r/remove #(= 0 (rem % 2)) [1 2 3])&quot; &quot;@(r/filter #(= 0 (rem % 2)) [1 2 3])&quot; &quot;'(r/filter #(= 0 (rem % 2)) [1 2 3])&quot; &quot;(r/filter #(= 0 (rem % 2)) [1 2 3])&quot; &quot;(time (reduce + (primes-to 1000)))&quot; &quot;(time (reduce + (primes-to 10000)))&quot; &quot;(time (reduce + (primes-to 100000)))&quot; &quot;(time (reduce + (primes-to 1000000)))&quot; &quot;(time (reduce + (primes-to 10000000)))&quot; &quot;(time (reduce + (primes-to-1 10000000)))&quot; &quot;(time (reduce + (primes-to1 10000000)))&quot; &quot;(time (reduce + (primes-to2 10000000)))&quot; &quot;(time (reduce + (primes-to2 100000000)))&quot; &quot;(time (reduce + (primes-to1 100000000)))&quot; &quot;(dumb-prime 100)&quot; &quot;(dumb-prime 2)&quot; &quot;(dumb-prime 3)&quot; &quot;(dumb-prime 4)&quot; &quot;(dumb-prime 5)&quot; &quot;(dumb-prime 1)&quot; &quot;(dumb-prime 1000)&quot; &quot;(reduce + (dumb-prime 100000))&quot; &quot;(reduce + (dumb-prime 10000))&quot; &quot;(eul-1-1 1000)&quot; &quot;(eul-1-1 10)&quot; &quot;(time (eul-1-1 1000))&quot; &quot;(eul-95-1 10)&quot; &quot;(eul-95-1 2)&quot; &quot;(eul-95-1 3)&quot; &quot;(time (eul-95-1 3))&quot; &quot;(cons 3 #{1})&quot; &quot;(loop [i 1]\n  (if (= i (quot lim 2))\n    nil\n    (let [a (find-ami i)]\n      (do\n        (println i a)\n        (recur (inc i))))))&quot; &quot;(time (eul-95-1 10))&quot;], :remote []}}</component>
</project>